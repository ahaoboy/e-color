import { bench, describe } from "vitest"

// Char code to its hex value
function x(c) {
  return (c & 0xf) + 9 * (c >> 6)
}

function parseHex_function(color: string) {
  const r = (x(color.charCodeAt(1)) << 4) | x(color.charCodeAt(2))
  const g = (x(color.charCodeAt(3)) << 4) | x(color.charCodeAt(4))
  const b = (x(color.charCodeAt(5)) << 4) | x(color.charCodeAt(6))
  const a = (x(color.charCodeAt(7)) << 4) | x(color.charCodeAt(8))
  return (r << 24) | (g << 16) | (b << 8) | (a << 0)
}

// Char code to its hex value, but as a table
const _ = 0
const X = [
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  10,
  11,
  12,
  13,
  14,
  15,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  10,
  11,
  12,
  13,
  14,
  15,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
  _,
]

function parseHex_table(color: string) {
  const r = (X[color.charCodeAt(1)] << 4) | X[color.charCodeAt(2)]
  const g = (X[color.charCodeAt(3)] << 4) | X[color.charCodeAt(4)]
  const b = (X[color.charCodeAt(5)] << 4) | X[color.charCodeAt(6)]
  const a = (X[color.charCodeAt(7)] << 4) | X[color.charCodeAt(8)]
  return (r << 24) | (g << 16) | (b << 8) | (a << 0)
}

describe("color", async () => {
  bench("parseInt", () => {
    let N = 1 << 20
    while (N--) Number.parseInt("#F0F0F0F0".slice(1), 16)
  })

  bench("parseHex_table", () => {
    let N = 1 << 20
    while (N--) parseHex_table("#F0F0F0F0")
  })

  bench("parseHex_function", () => {
    let N = 1 << 20
    while (N--) parseHex_function("#F0F0F0F0")
  })
})
